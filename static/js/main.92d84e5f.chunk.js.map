{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LANGUAGE","Selector","selectLang","lang","theme","useState","showList","setShowList","handleLangList","className","map","el","index","onClick","App","content","setContent","language","setLanguage","setTheme","style","backgroundColor","width","height","value","onChange","e","loading","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAKMA,G,MAAW,CAChB,aACA,OACA,MACA,aACA,OACA,OACA,OACA,QACA,MACA,QACA,IACA,MACA,OACA,SACA,OACA,aACA,KACA,UACA,WACA,MACA,OACA,cACA,SACA,OACA,OACA,OACA,QACA,QACA,eACA,SACA,YACA,OAGKC,EAAW,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,KAAkB,KAAZC,MACLC,oBAAS,IADQ,mBAC1CC,EAD0C,KAChCC,EADgC,KAG3CC,EAAiB,WACtBD,GAAaD,IAQd,OACC,sBAAKG,UAAU,mBAAf,UACEH,GACA,qBAAKG,UAAU,QAAf,SACET,EAASU,KAAI,SAACC,EAAIC,GAAL,OACb,mBAAeC,QAAS,kBAT5BX,EAS+CS,QAR/CH,KAQI,SACEG,GADMC,QAMX,qBAAKH,UAAU,aAAaI,QAASL,EAArC,SACEL,QA4DUW,EAtDH,WAAO,IAAD,EACaT,mBAAS,+BADtB,mBACVU,EADU,KACDC,EADC,OAEeX,mBAASL,EAAS,IAFjC,mBAEViB,EAFU,KAEAC,EAFA,OAGSb,oBAAS,GAHlB,mBAGVD,EAHU,KAGHe,EAHG,KAiBjB,OACC,qBACCV,UAAU,OACVW,MAAO,CAAEC,gBAAiBjB,EAAQ,UAAY,WAF/C,SAIC,sBAAKgB,MAAO,CAAEE,MAAO,OAAQC,OAAQ,QAArC,UACC,qBAAKd,UAAU,eAAf,SACC,cAAC,mBAAD,CACCe,MAAOT,EACPN,UAAW,SACXQ,SAAUA,EACVQ,SAvBiB,SAACC,EAAGF,GACzBR,EAAWQ,IAuBPpB,MAAOA,EAAQ,QAAU,OACzBuB,QACC,oBAAIP,MAAO,CAAEQ,MAAOxB,EAAQ,OAAS,SAArC,4BAIH,qBACCK,UAAU,gBACVW,MAAO,CAAEC,gBAAiBjB,EAAQ,UAAY,WAF/C,SAIC,sBAAKK,UAAU,UAAf,UACC,cAAC,EAAD,CACCP,WAAY,SAACC,GAAD,OAAUe,EAAYf,IAClCA,KAAMc,IAEP,wBAAQR,UAAU,WAAWI,QA/Bd,WACnBM,GAAUf,IA8BN,SACEA,EAAQ,OAAS,qBCvGVyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92d84e5f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { ControlledEditor } from \"@monaco-editor/react\";\n\nimport \"./App.css\";\n\nconst LANGUAGE = [\n\t\"javascript\",\n\t\"html\",\n\t\"css\",\n\t\"typescript\",\n\t\"json\",\n\t\"less\",\n\t\"scss\",\n\t\"mysql\",\n\t\"sql\",\n\t\"pgsql\",\n\t\"c\",\n\t\"cpp\",\n\t\"java\",\n\t\"csharp\",\n\t\"dart\",\n\t\"dockerfile\",\n\t\"go\",\n\t\"graphql\",\n\t\"markdown\",\n\t\"php\",\n\t\"perl\",\n\t\"objective-c\",\n\t\"python\",\n\t\"rust\",\n\t\"ruby\",\n\t\"rust\",\n\t\"shell\",\n\t\"swift\",\n\t\"coffeescript\",\n\t\"kotlin\",\n\t\"plaintext\",\n\t\"vb\",\n];\n\nconst Selector = ({ selectLang, lang, theme }) => {\n\tconst [showList, setShowList] = useState(false);\n\n\tconst handleLangList = () => {\n\t\tsetShowList(!showList);\n\t};\n\n\tconst onSelectLang = (selectedLang) => {\n\t\tselectLang(selectedLang);\n\t\thandleLangList();\n\t};\n\n\treturn (\n\t\t<div className=\"SelectLangHolder\">\n\t\t\t{showList && (\n\t\t\t\t<div className=\"Langs\">\n\t\t\t\t\t{LANGUAGE.map((el, index) => (\n\t\t\t\t\t\t<p key={index} onClick={() => onSelectLang(el)}>\n\t\t\t\t\t\t\t{el}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className=\"SelectLang\" onClick={handleLangList}>\n\t\t\t\t{lang}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nconst App = () => {\n\tconst [content, setContent] = useState(\"// Create something awesome\");\n\tconst [language, setLanguage] = useState(LANGUAGE[0]);\n\tconst [theme, setTheme] = useState(false);\n\n\tconst handleContent = (e, value) => {\n\t\tsetContent(value);\n\t};\n\n\tconst handleLang = (e) => {\n\t\tsetLanguage(e.target.value);\n\t};\n\n\tconst handleTheme = () => {\n\t\tsetTheme(!theme);\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Main\"\n\t\t\tstyle={{ backgroundColor: theme ? \"#FFFFFE\" : \"#202124\" }}\n\t\t>\n\t\t\t<div style={{ width: \"100%\", height: \"auto\" }}>\n\t\t\t\t<div className=\"EditorHolder\">\n\t\t\t\t\t<ControlledEditor\n\t\t\t\t\t\tvalue={content}\n\t\t\t\t\t\tclassName={\"Editor\"}\n\t\t\t\t\t\tlanguage={language}\n\t\t\t\t\t\tonChange={handleContent}\n\t\t\t\t\t\ttheme={theme ? \"light\" : \"dark\"}\n\t\t\t\t\t\tloading={\n\t\t\t\t\t\t\t<h1 style={{ color: theme ? \"gray\" : \"white\" }}>Waiting...</h1>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"SettingHolder\"\n\t\t\t\t\tstyle={{ backgroundColor: theme ? \"#C9C9C8\" : \"#1E1E1E\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"Setting\">\n\t\t\t\t\t\t<Selector\n\t\t\t\t\t\t\tselectLang={(lang) => setLanguage(lang)}\n\t\t\t\t\t\t\tlang={language}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button className=\"ThemeBTN\" onClick={handleTheme}>\n\t\t\t\t\t\t\t{theme ? \"dark\" : \"light\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}